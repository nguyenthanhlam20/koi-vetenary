// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace KoiVetenary.Data.Models
{
    public partial class FA24_SE1716_PRN231_G3_KoiVetenaryContext : DbContext
    {
        public FA24_SE1716_PRN231_G3_KoiVetenaryContext()
        {
        }

        public FA24_SE1716_PRN231_G3_KoiVetenaryContext(DbContextOptions<FA24_SE1716_PRN231_G3_KoiVetenaryContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Animal> Animals { get; set; }
        public virtual DbSet<AnimalType> AnimalTypes { get; set; }
        public virtual DbSet<Appointment> Appointments { get; set; }
        public virtual DbSet<AppointmentDetail> AppointmentDetails { get; set; }
        public virtual DbSet<Category> Categories { get; set; }
        public virtual DbSet<MedicalRecord> MedicalRecords { get; set; }
        public virtual DbSet<Owner> Owners { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Veterinarian> Veterinarians { get; set; }

        public static string GetConnectionString(string connectionStringName)
        {
            var config = new ConfigurationBuilder()
                .SetBasePath(AppDomain.CurrentDomain.BaseDirectory)
                .AddJsonFile("appsettings.json")
                .Build();

            string connectionString = config.GetConnectionString(connectionStringName);
            return connectionString;
        }
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
            => optionsBuilder.UseSqlServer(GetConnectionString("DefaultConnection")).UseQueryTrackingBehavior
            (QueryTrackingBehavior.NoTracking);

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Animal>(entity =>
            {
                entity.Property(e => e.AnimalId).HasColumnName("AnimalID");

                entity.Property(e => e.Color).HasMaxLength(50);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.DateAdded).HasColumnType("date");

                entity.Property(e => e.DateOfBirth).HasColumnType("date");

                entity.Property(e => e.DistinguishingMarks).HasMaxLength(100);

                entity.Property(e => e.Gender).HasMaxLength(20);

                entity.Property(e => e.ImageUrl).HasMaxLength(255);

                entity.Property(e => e.LastCheckup).HasColumnType("date");

                entity.Property(e => e.Length).HasColumnType("decimal(5, 2)");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Name).HasMaxLength(50);

                entity.Property(e => e.Origin).HasMaxLength(100);

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.Species).HasMaxLength(50);

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.Weight).HasColumnType("decimal(5, 2)");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Animals)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK__Animals__OwnerID__36B12243");

                entity.HasOne(d => d.Type)
                    .WithMany(p => p.Animals)
                    .HasForeignKey(d => d.TypeId)
                    .HasConstraintName("FK__Animals__TypeID__37A5467C");
            });

            modelBuilder.Entity<AnimalType>(entity =>
            {
                entity.HasKey(e => e.TypeId)
                    .HasName("PK__AnimalTy__516F0395387DDE85");

                entity.Property(e => e.TypeId).HasColumnName("TypeID");

                entity.Property(e => e.TypeName)
                    .IsRequired()
                    .HasMaxLength(50);
            });

            modelBuilder.Entity<Appointment>(entity =>
            {
                entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");

                entity.Property(e => e.AppointmentDate).HasColumnType("date");

                entity.Property(e => e.ContactEmail).HasMaxLength(50);

                entity.Property(e => e.ContactPhone).HasMaxLength(20);

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.SpecialRequests).HasMaxLength(500);

                entity.Property(e => e.Status).HasMaxLength(20);

                entity.Property(e => e.TotalCost).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Owner)
                    .WithMany(p => p.Appointments)
                    .HasForeignKey(d => d.OwnerId)
                    .HasConstraintName("FK__Appointme__Owner__3C69FB99");
            });

            modelBuilder.Entity<AppointmentDetail>(entity =>
            {
                entity.Property(e => e.AppointmentDetailId).HasColumnName("AppointmentDetailID");

                entity.Property(e => e.Allergies).HasMaxLength(500);

                entity.Property(e => e.AnimalId).HasColumnName("AnimalID");

                entity.Property(e => e.AnimalStatus).HasMaxLength(500);

                entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.EmergencyInstructions).HasMaxLength(500);

                entity.Property(e => e.GroomingNeeds).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Notes).HasMaxLength(500);

                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.SpecialNeeds).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.VeterinarianId).HasColumnName("VeterinarianID");

                entity.HasOne(d => d.Animal)
                    .WithMany(p => p.AppointmentDetails)
                    .HasForeignKey(d => d.AnimalId)
                    .HasConstraintName("FK__Appointme__Anima__38996AB5");

                entity.HasOne(d => d.Appointment)
                    .WithMany(p => p.AppointmentDetails)
                    .HasForeignKey(d => d.AppointmentId)
                    .HasConstraintName("FK__Appointme__Appoi__398D8EEE");

                entity.HasOne(d => d.Service)
                    .WithMany(p => p.AppointmentDetails)
                    .HasForeignKey(d => d.ServiceId)
                    .HasConstraintName("FK__Appointme__Servi__3A81B327");

                entity.HasOne(d => d.Veterinarian)
                    .WithMany(p => p.AppointmentDetails)
                    .HasForeignKey(d => d.VeterinarianId)
                    .HasConstraintName("FK__Appointme__Veter__3B75D760");
            });

            modelBuilder.Entity<Category>(entity =>
            {
                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.IconUrl)
                    .HasMaxLength(255)
                    .HasColumnName("IconURL");

                entity.Property(e => e.IsActive).HasDefaultValueSql("((1))");

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.ModifiedDate).HasColumnType("datetime");

                entity.Property(e => e.Name).HasMaxLength(50);
            });

            modelBuilder.Entity<MedicalRecord>(entity =>
            {
                entity.HasKey(e => e.RecordId)
                    .HasName("PK__MedicalR__FBDF78C926E608BA");

                entity.Property(e => e.RecordId).HasColumnName("RecordID");

                entity.Property(e => e.AnimalId).HasColumnName("AnimalID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Diagnosis).HasMaxLength(200);

                entity.Property(e => e.FollowUpDate).HasColumnType("date");

                entity.Property(e => e.LabResults).HasMaxLength(500);

                entity.Property(e => e.Medications).HasMaxLength(200);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.RecordDate).HasColumnType("date");

                entity.Property(e => e.Symptoms).HasMaxLength(500);

                entity.Property(e => e.Treatment).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.Property(e => e.VetNotes).HasMaxLength(1000);

                entity.HasOne(d => d.Animal)
                    .WithMany(p => p.MedicalRecords)
                    .HasForeignKey(d => d.AnimalId)
                    .HasConstraintName("FK__MedicalRe__Anima__3D5E1FD2");
            });

            modelBuilder.Entity<Owner>(entity =>
            {
                entity.Property(e => e.OwnerId).HasColumnName("OwnerID");

                entity.Property(e => e.Address).HasMaxLength(100);

                entity.Property(e => e.City).HasMaxLength(50);

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.PreferredContactMethod).HasMaxLength(20);

                entity.Property(e => e.RegistrationDate).HasColumnType("date");

                entity.Property(e => e.State).HasMaxLength(50);

                entity.Property(e => e.ZipCode).HasMaxLength(20);
            });

            modelBuilder.Entity<Payment>(entity =>
            {
                entity.Property(e => e.PaymentId).HasColumnName("PaymentID");

                entity.Property(e => e.AppointmentId).HasColumnName("AppointmentID");

                entity.Property(e => e.BankCode).IsRequired();

                entity.Property(e => e.BankTranNo).HasMaxLength(255);

                entity.Property(e => e.CreatedAt).HasColumnType("date");

                entity.Property(e => e.Message).IsRequired();

                entity.Property(e => e.OrderInfo).IsRequired();

                entity.Property(e => e.PaymentDate).HasColumnType("date");

                entity.Property(e => e.ResponseCode).HasMaxLength(20);

                entity.Property(e => e.ResponseId)
                    .IsRequired()
                    .HasMaxLength(450);

                entity.Property(e => e.SecureHash).IsRequired();

                entity.Property(e => e.TmnCode).IsRequired();

                entity.Property(e => e.TransactionNo).HasMaxLength(255);

                entity.Property(e => e.TransactionStatus).HasMaxLength(15);

                entity.Property(e => e.TransactionType).IsRequired();

                entity.Property(e => e.TxnRef).IsRequired();

                entity.HasOne(d => d.Appointment)
                    .WithMany(p => p.Payments)
                    .HasForeignKey(d => d.AppointmentId)
                    .HasConstraintName("FK__Payments__Appoin__3E52440B");
            });

            modelBuilder.Entity<Service>(entity =>
            {
                entity.Property(e => e.ServiceId).HasColumnName("ServiceID");

                entity.Property(e => e.BasePrice).HasColumnType("decimal(10, 2)");

                entity.Property(e => e.CategoryId).HasColumnName("CategoryID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Description).HasMaxLength(500);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.RequiredEquipment).HasMaxLength(200);

                entity.Property(e => e.ServiceImg).HasMaxLength(255);

                entity.Property(e => e.ServiceName).HasMaxLength(100);

                entity.Property(e => e.SpecialInstructions).HasMaxLength(500);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");

                entity.HasOne(d => d.Category)
                    .WithMany(p => p.Services)
                    .HasForeignKey(d => d.CategoryId)
                    .HasConstraintName("FK__Services__Catego__3F466844");
            });

            modelBuilder.Entity<Veterinarian>(entity =>
            {
                entity.Property(e => e.VeterinarianId).HasColumnName("VeterinarianID");

                entity.Property(e => e.CreatedBy).HasMaxLength(50);

                entity.Property(e => e.CreatedDate).HasColumnType("datetime");

                entity.Property(e => e.Email).HasMaxLength(100);

                entity.Property(e => e.FirstName).HasMaxLength(50);

                entity.Property(e => e.HireDate).HasColumnType("date");

                entity.Property(e => e.LastName).HasMaxLength(50);

                entity.Property(e => e.LicenseNumber).HasMaxLength(50);

                entity.Property(e => e.ModifiedBy).HasMaxLength(50);

                entity.Property(e => e.Phone).HasMaxLength(20);

                entity.Property(e => e.Specialization).HasMaxLength(100);

                entity.Property(e => e.UpdatedDate).HasColumnType("datetime");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}